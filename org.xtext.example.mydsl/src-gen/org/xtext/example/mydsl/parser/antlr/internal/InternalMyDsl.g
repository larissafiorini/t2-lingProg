/*
 * generated by Xtext 2.13.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getOperationExpressionParserRuleCall_0());
			}
			lv_operation_0_0=ruleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"operation",
					lv_operation_0_0,
					"org.xtext.example.mydsl.MyDsl.Expression");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDefine
entryRuleDefine returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	iv_ruleDefine=ruleDefine
	{ $current=$iv_ruleDefine.current.getText(); }
	EOF;

// Rule Define
ruleDefine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0());
		}
		kw='define'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefineAccess().getDefineKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getDefineAccess().getIDTerminalRuleCall_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getDefineAccess().getINTTerminalRuleCall_3());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefineAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLambda
entryRuleLambda returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLambdaRule()); }
	iv_ruleLambda=ruleLambda
	{ $current=$iv_ruleLambda.current.getText(); }
	EOF;

// Rule Lambda
ruleLambda returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLambdaAccess().getLeftParenthesisKeyword_0());
		}
		kw='lambda'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLambdaAccess().getLambdaKeyword_1());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLambdaAccess().getLeftParenthesisKeyword_2());
		}
		(
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getLambdaAccess().getIDTerminalRuleCall_3_0());
			}
			    |
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getLambdaAccess().getINTTerminalRuleCall_3_1());
			}
		)
		(
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLambdaAccess().getRightParenthesisKeyword_4());
			}
		)*
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getSolidusKeyword_3());
		}
	)
;

// Entry rule entryRuleConditional
entryRuleConditional returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current.getText(); }
	EOF;

// Rule Conditional
ruleConditional returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_0());
		}
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionalAccess().getIfKeyword_1());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_2());
		}
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionalAccess().getEqualsSignKeyword_3());
		}
		(
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getConditionalAccess().getINTTerminalRuleCall_4_0());
			}
			    |
			this_ID_5=RULE_ID
			{
				$current.merge(this_ID_5);
			}
			{
				newLeafNode(this_ID_5, grammarAccess.getConditionalAccess().getIDTerminalRuleCall_4_1());
			}
		)
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getConditionalAccess().getINTTerminalRuleCall_5());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionalAccess().getRightParenthesisKeyword_6());
		}
		this_INT_8=RULE_INT
		{
			$current.merge(this_INT_8);
		}
		{
			newLeafNode(this_INT_8, grammarAccess.getConditionalAccess().getINTTerminalRuleCall_7());
		}
		(
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditionalAccess().getRightParenthesisKeyword_8());
			}
		)?
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current.getText(); }
	EOF;

// Rule Variable
ruleVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getOperatorParserRuleCall_1());
		}
		this_Operator_1=ruleOperator
		{
			$current.merge(this_Operator_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getVariableAccess().getIDTerminalRuleCall_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getVariableAccess().getINTTerminalRuleCall_3());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFactorial
entryRuleFactorial returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFactorialRule()); }
	iv_ruleFactorial=ruleFactorial
	{ $current=$iv_ruleFactorial.current.getText(); }
	EOF;

// Rule Factorial
ruleFactorial returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFactorialAccess().getLeftParenthesisKeyword_0_0());
			}
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getFactorialAccess().getIDTerminalRuleCall_0_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFactorialAccess().getVariableParserRuleCall_1_0());
			}
			this_Variable_2=ruleVariable
			{
				$current.merge(this_Variable_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFactorialAccess().getRightParenthesisKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current.getText(); }
	EOF;

// Rule Operation
ruleOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getOperationAccess().getOperatorParserRuleCall_0_1());
			}
			this_Operator_1=ruleOperator
			{
				$current.merge(this_Operator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getOperationAccess().getIDTerminalRuleCall_0_2());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getOperationAccess().getFactorialParserRuleCall_1_0());
			}
			this_Factorial_3=ruleFactorial
			{
				$current.merge(this_Factorial_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOperationAccess().getRightParenthesisKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current.getText(); }
	EOF;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getDefineParserRuleCall_0());
		}
		this_Define_0=ruleDefine
		{
			$current.merge(this_Define_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLambdaParserRuleCall_2());
		}
		this_Lambda_2=ruleLambda
		{
			$current.merge(this_Lambda_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getConditionalParserRuleCall_3());
		}
		this_Conditional_3=ruleConditional
		{
			$current.merge(this_Conditional_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getVariableParserRuleCall_4());
		}
		this_Variable_4=ruleVariable
		{
			$current.merge(this_Variable_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFactorialParserRuleCall_5());
		}
		this_Factorial_5=ruleFactorial
		{
			$current.merge(this_Factorial_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getOperationParserRuleCall_6());
		}
		this_Operation_6=ruleOperation
		{
			$current.merge(this_Operation_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
