/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.mydsl.myDsl.Model

@RunWith(XtextRunner)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTest {
	@Inject
	ParseHelper<Model> parseHelper

	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			10
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void loadModel2() {
		val result = parseHelper.parse('''
			(define x 10) 
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void loadModel3() {
		val result = parseHelper.parse('''
			(lambda (x)) 
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void loadModel4() {
		val result = parseHelper.parse('''
			( if (= 1 2) 2 )
		''')
		Assert.assertNotNull(result)
		val result2 = parseHelper.parse('''
			( if (= n 2) 3 )
		''')
		Assert.assertNotNull(result2)
		Assert.assertTrue(result.eResource.errors.isEmpty)
		Assert.assertTrue(result2.eResource.errors.isEmpty)
	}

	@Test
	def void loadModel5() {
		val result = parseHelper.parse('''
			(- n 1)
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void loadModel6() {
		val result = parseHelper.parse('''
			(fact (- n 1))
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void loadModel7() {
		val result = parseHelper.parse('''
			(* n (fact (- n 1)))
			
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
}
