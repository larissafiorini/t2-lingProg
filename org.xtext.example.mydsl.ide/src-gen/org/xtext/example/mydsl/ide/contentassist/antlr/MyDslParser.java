/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLambdaAccess().getAlternatives_3(), "rule__Lambda__Alternatives_3");
			builder.put(grammarAccess.getConditionalAccess().getAlternatives_4(), "rule__Conditional__Alternatives_4");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getDefineAccess().getGroup(), "rule__Define__Group__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup(), "rule__Lambda__Group__0");
			builder.put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getModelAccess().getExpressionsAssignment(), "rule__Model__ExpressionsAssignment");
			builder.put(grammarAccess.getDefineAccess().getNameAssignment_2(), "rule__Define__NameAssignment_2");
			builder.put(grammarAccess.getDefineAccess().getValueAssignment_3(), "rule__Define__ValueAssignment_3");
			builder.put(grammarAccess.getLambdaAccess().getNameAssignment_3_0(), "rule__Lambda__NameAssignment_3_0");
			builder.put(grammarAccess.getLambdaAccess().getValueAssignment_3_1(), "rule__Lambda__ValueAssignment_3_1");
			builder.put(grammarAccess.getConditionalAccess().getValueAssignment_4_0(), "rule__Conditional__ValueAssignment_4_0");
			builder.put(grammarAccess.getConditionalAccess().getNameAssignment_4_1(), "rule__Conditional__NameAssignment_4_1");
			builder.put(grammarAccess.getConditionalAccess().getValue2Assignment_5(), "rule__Conditional__Value2Assignment_5");
			builder.put(grammarAccess.getConditionalAccess().getValue3Assignment_7(), "rule__Conditional__Value3Assignment_7");
			builder.put(grammarAccess.getOperationAccess().getOpAssignment_1(), "rule__Operation__OpAssignment_1");
			builder.put(grammarAccess.getOperationAccess().getValueAssignment_2(), "rule__Operation__ValueAssignment_2");
			builder.put(grammarAccess.getOperationAccess().getValue2Assignment_3(), "rule__Operation__Value2Assignment_3");
			builder.put(grammarAccess.getExpressionAccess().getValueAssignment_1(), "rule__Expression__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
